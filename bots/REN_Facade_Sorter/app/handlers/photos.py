"""
Photo upload handlers for the REN Facade Sorter bot.
"""

import os
import asyncio
from datetime import datetime
from typing import Dict, List
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
from app.utils.logger import logger
from app.keyboards.inline import photo_upload_menu, post_upload_menu
from app.states import PhotoUploadStates

# Global dictionary to store media groups
media_groups: Dict[str, List[Message]] = {}
media_group_timers: Dict[str, asyncio.Task] = {}


def register_handlers(bot: AsyncTeleBot):
    """
    Register all photo upload handlers.
    """
    
    @bot.message_handler(content_types=['photo'], state=PhotoUploadStates.waiting_for_photos)
    async def handle_photo_upload(message: Message):
        """
        Handle photo upload during waiting_for_photos state.
        Supports both single photos and media groups.
        """
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with bot.retrieve_data(user_id, chat_id) as data:
            inspection = data.get('inspection')
            block = data.get('block')
            orientation = data.get('orientation')
            level = data.get('level')
            
            if not all([inspection, block, orientation, level]):
                await bot.send_message(
                    chat_id,
                    "‚ùå **Error:** Missing selection parameters. Please start over with /start",
                    parse_mode='Markdown'
                )
                logger.error(f"User {user_id} missing parameters: {data}")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if message.media_group_id:
            await handle_media_group_photo(bot, message)
        else:
            await handle_single_photo(bot, message)


async def handle_media_group_photo(bot: AsyncTeleBot, message: Message):
    """
    Handle photo that is part of a media group.
    """
    media_group_id = message.media_group_id
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    group_key = f"{user_id}_{media_group_id}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    if group_key not in media_groups:
        media_groups[group_key] = []
    
    media_groups[group_key].append(message)
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if group_key in media_group_timers:
        media_group_timers[group_key].cancel()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (–∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ)
    media_group_timers[group_key] = asyncio.create_task(
        process_media_group_delayed(bot, group_key, user_id, message.chat.id)
    )


async def process_media_group_delayed(bot: AsyncTeleBot, group_key: str, user_id: int, chat_id: int):
    """
    Process media group after a delay to ensure all photos are received.
    """
    try:
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
        await asyncio.sleep(1.0)
        
        if group_key not in media_groups:
            return
        
        messages = media_groups[group_key]
        photo_count = len(messages)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        async with bot.retrieve_data(user_id, chat_id) as data:
            if 'photos' not in data:
                data['photos'] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            for msg in messages:
                photo = msg.photo[-1]  # –ù–∞–∏–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                photo_info = {
                    'file_id': photo.file_id,
                    'file_unique_id': photo.file_unique_id,
                    'width': photo.width,
                    'height': photo.height,
                    'file_size': photo.file_size,
                    'timestamp': datetime.now().isoformat(),
                    'caption': msg.caption or ""
                }
                data['photos'].append(photo_info)
            
            total_photos = len(data['photos'])
            inspection = data.get('inspection')
            block = data.get('block')
            orientation = data.get('orientation')
            level = data.get('level')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        notification_text = f"""üì∏ **Media Group Received** (+{photo_count} photos)

**Current location:**
‚Ä¢ Inspection: **{inspection}**
‚Ä¢ Block: **{block}**
‚Ä¢ Orientation: **{orientation.replace('_', ' ')}**
‚Ä¢ Level: **{level}**

üìä **Photos collected:** {total_photos}

Continue sending photos or save the current batch."""

        await bot.send_message(
            chat_id,
            notification_text,
            reply_markup=photo_upload_menu(total_photos),
            parse_mode='Markdown'
        )
        
        logger.info(f"User {user_id} uploaded media group with {photo_count} photos for {inspection}/{block}/{level}/{orientation}")
        
        # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        del media_groups[group_key]
        del media_group_timers[group_key]
        
    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    except Exception as e:
        logger.error(f"Error processing media group {group_key}: {e}")


async def handle_single_photo(bot: AsyncTeleBot, message: Message):
    """
    Handle single photo upload.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
    async with bot.retrieve_data(user_id, chat_id) as data:
        if 'photos' not in data:
            data['photos'] = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–≤—ã—Å—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_info = {
            'file_id': photo.file_id,
            'file_unique_id': photo.file_unique_id,
            'width': photo.width,
            'height': photo.height,
            'file_size': photo.file_size,
            'timestamp': datetime.now().isoformat(),
            'caption': message.caption or ""
        }
        
        data['photos'].append(photo_info)
        photo_count = len(data['photos'])
        
        inspection = data.get('inspection')
        block = data.get('block')
        orientation = data.get('orientation')
        level = data.get('level')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
    notification_text = f"""üì∏ **Photo Received** ({photo_count})

**Current location:**
‚Ä¢ Inspection: **{inspection}**
‚Ä¢ Block: **{block}**
‚Ä¢ Orientation: **{orientation.replace('_', ' ')}**
‚Ä¢ Level: **{level}**

üìä **Photos collected:** {photo_count}

Continue sending photos or save the current batch."""

    await bot.send_message(
        chat_id,
        notification_text,
        reply_markup=photo_upload_menu(photo_count),
        parse_mode='Markdown'
    )
    
    logger.info(f"User {user_id} uploaded single photo {photo_count} for {inspection}/{block}/{level}/{orientation}")

    @bot.message_handler(content_types=['text'], state=PhotoUploadStates.waiting_for_photos)
    async def handle_text_during_upload(message: Message):
        """
        Handle text messages during photo upload state.
        """
        if message.text and not message.text.startswith('/'):
            await bot.send_message(
                message.chat.id,
                "üì∏ **Send photos or use commands:**\n\n"
                "‚Ä¢ Send photos to upload them\n"
                "‚Ä¢ Use /cancel to cancel operation",
                parse_mode='Markdown'
            )


async def save_photos(bot: AsyncTeleBot, user_id: int, chat_id: int, data: dict):
    """
    Save uploaded photos to the file system.
    
    Args:
        bot: Telegram bot instance
        user_id: User ID
        chat_id: Chat ID  
        data: User data containing photos and location info
    """
    try:
        inspection = data['inspection']
        block = data['block']
        orientation = data['orientation']
        level = data['level']
        photos = data['photos']
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_path = os.path.join(
            "structure_inspections",
            inspection,
            block,
            level,
            orientation,
            "unsorted"
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(save_path, exist_ok=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        progress_msg = await bot.send_message(
            chat_id,
            f"üíæ **Saving {len(photos)} photos...**\n\nüîÑ Processing...",
            parse_mode='Markdown'
        )
        
        saved_count = 0
        failed_count = 0
        saved_files = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
        for i, photo_info in enumerate(photos, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                file_path = await bot.get_file(photo_info['file_id'])
                downloaded_file = await bot.download_file(file_path.file_path)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"{timestamp}_{i:03d}_{photo_info['file_unique_id']}.jpg"
                full_path = os.path.join(save_path, filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(full_path, 'wb') as f:
                    f.write(downloaded_file)
                
                saved_files.append(filename)
                saved_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º
                if i % 3 == 0 or i == len(photos):
                    await bot.edit_message_text(
                        f"üíæ **Saving {len(photos)} photos...**\n\n"
                        f"üìä Progress: {i}/{len(photos)}\n"
                        f"‚úÖ Saved: {saved_count}\n"
                        f"‚ùå Failed: {failed_count}",
                        chat_id,
                        progress_msg.message_id,
                        parse_mode='Markdown'
                    )
                
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to save photo {i} for user {user_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['photos'] = []
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ
        await bot.set_state(user_id, PhotoUploadStates.waiting_for_photos, chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_text = f"""‚úÖ **Upload Complete!**

**Location:**
‚Ä¢ Inspection: **{inspection}**
‚Ä¢ Block: **{block}**
‚Ä¢ Orientation: **{orientation.replace('_', ' ')}**
‚Ä¢ Level: **{level}**

üìä **Results:**
‚Ä¢ ‚úÖ Successfully saved: **{saved_count}** photos
‚Ä¢ ‚ùå Failed to save: **{failed_count}** photos

üìÅ **Save path:**
`{save_path}`

**What's next?**"""

        if failed_count > 0:
            report_text += f"\n\n‚ö†Ô∏è **Warning:** {failed_count} photos failed to save. Check logs for details."
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await bot.delete_message(chat_id, progress_msg.message_id)
        
        await bot.send_message(
            chat_id,
            report_text,
            reply_markup=post_upload_menu(inspection, block, orientation, level),
            parse_mode='Markdown'
        )
        
        logger.info(f"User {user_id} saved {saved_count} photos to {save_path}, {failed_count} failed")
        
    except Exception as e:
        logger.error(f"Error saving photos for user {user_id}: {e}")
        await bot.send_message(
            chat_id,
            f"‚ùå **Error saving photos**\n\n{str(e)}\n\nPlease try again or contact support.",
            parse_mode='Markdown'
        ) 